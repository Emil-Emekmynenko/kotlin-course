package com.emil.org.emil.kotlincourse.lesson13

fun main() {
// Задачи на приведение коллекций к значению
    val numbers = listOf(1,3,4,6,7,8)
    val strings = listOf("as", "ef", "efe", "rfrfr")

numbers.size > 5 //    1. Проверить, что размер коллекции больше 5 элементов - .size
numbers.isEmpty() //    2. Проверить, что коллекция пустая - .isEmpty
numbers.isNotEmpty() //    3. Проверить, что коллекция не пустая - .isNotEmpty
numbers.getOrElse(5){5} //    4. Взять элемент по индексу или создать значение если индекса не существует - .getOrElse
numbers.joinToString { " " } //    5. Собрать коллекцию в строку - .joinToString
numbers.sum() //    6. Посчитать сумму всех значений - .sum
numbers.average() //    7. Посчитать среднее - .average
numbers.maxOrNull() //    8. Взять максимальное число - .maxOrNull
numbers.minOrNull() //    9. Взять минимальное число - .minOrNull
numbers.firstOrNull() //    10. Взять первое число или null - .firstOrNull
numbers.contains(5) //    11. Проверить что коллекция содержит элемент - .contains

// Задачи на обработку коллекций

numbers.filter { it in 18..30 }//    1. Отфильтровать коллекцию по диапазону 18-30 - .filter
numbers.filterNot { it % 2 == 0 && it % 3 == 0 }//    2. Выбрать числа, которые не делятся на 2 и 3 одновременно - .filterNot
numbers.filterNotNull() //    3. Очистить текстовую коллекцию от null элементов - .filterNotNull
strings.map{it.length} //    4. Преобразовать текстовую коллекцию в коллекцию длин слов - .map
strings.associateWith { it.reversed() } //    5. Преобразовать текстовую коллекцию в мапу, где ключи - слова, а значения - перевёрнутые слова - .associate
strings.sorted() //    6. Отсортировать список в алфавитном порядке - .sorted
strings.sortedDescending() //    7. Отсортировать список по убыванию - .sortedDescending
numbers.forEach{it * it} //    8. Распечатать квадраты элементов списка - .forEach
strings.groupBy { if (it.first() == 'a') "лучшие" else "стрёмные" }//    9. Группировать список по первой букве слов - .groupBy
numbers.distinct() //    10. Очистить список от дублей - .distinct
numbers.take(3) //    11. Взять первые 3 элемента списка - .take(3)
numbers.takeLast(3) //    12. Взять последние 3 элемента списка - .takeLast(3)

    println(superMethod(emptyList())) // Пусто
    println(superMethod(listOf(1, 2, 3))) // Короткая
    println(superMethod(listOf(0, 2, 3, 4))) // Стартовая
    println(superMethod(listOf(2000, 3000, 5000, 4000, 6000))) // Массивная
    println(superMethod(listOf(10, 10, 10, 10))) // Сбалансированная
    println(superMethod(listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))) // Уникальная
    println(superMethod(listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))) // Клейкая
    println(superMethod(listOf(-11, -12, -13))) // Отрицательная
    println(superMethod(listOf(1001, 1002, 1003))) // Положительная
    println(superMethod(listOf(3, 14, 5))) // Пи***тая
    println(superMethod(listOf(1, 2, 5))) // Уникальная

    analysisAcademicAssessments()

    creatingDirectory()

    averageWordLength()

    categorizationOfNumbers()

    firstElement()

}

// Задание 2: Характеристика числовой коллекции

/*
Написать метод, который принимает коллекцию чисел и возвращает строку
с текущим состоянием коллекции используя конструкцию when

Если коллекция пустая - “Пусто”
Если количество элементов меньше пяти - “Короткая”
Если коллекция начинается с 0 - “Стартовая”
Если сумма всех чисел больше 10000 - “Массивная”
Если среднее значение равно 10 - “Сбалансированная”
Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
Если максимальное число меньше -10 - “Отрицательная”
Если минимальное число больше 1000 - “Положительная”
Если содержит одновременно числа 3 и 14 - “Пи***тая”
Иначе - “Уникальная”

Вызвать метод с данными, подходящими под каждую из веток
 */

fun superMethod(list: List<Int>): String{
    val result = when{
        list.isEmpty() -> "Пусто"
        list.size < 5 -> "Короткая"
        list.first() == 0 -> "Стартовая"
        list.sum() > 10000 -> "Массивная"
        list.average().toInt() == 10 -> "Сбалансированная"
        list.joinToString { "" }.length == 20 -> "Клейкая"
        list.max() <= -10 -> "Отрицательная"
        list.min() > 1000 -> "Положительная"
        list.contains(3) && list.contains(14) -> "Пи***тая"
        else -> "Уникальная"
    }
    return result
}

// Задание 3: Анализ Учебных Оценок
/*
Начальные значения: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3.
 */

fun analysisAcademicAssessments() {
    val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
    val satisfactoryGrades = grades.filter { it >= 60 }
        .sorted()
        .takeLast(3)
    println(satisfactoryGrades)
}

//Задание 4: Создание каталога по первой букве.
/*
Начальные значения: val list = listOf(
    "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер",
    "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик",
    "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник",
    "Коврик", "вешалка", "Подставка", "телевизор", "Комод",
    "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра",
    "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка",
    "Ключница", "плед", "Тумба", "игрушка", "Настенные часы",
    "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья",
    "посуда", "Настольная лампа", "торшер", "Этажерка"
)
Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве.

 */

fun creatingDirectory() {
    val list = listOf(
        "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер",
        "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик",
        "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник",
        "Коврик", "вешалка", "Подставка", "телевизор", "Комод",
        "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра",
        "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка",
        "Ключница", "плед", "Тумба", "игрушка", "Настенные часы",
        "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья",
        "посуда", "Настольная лампа", "торшер", "Этажерка"
    )
    val catalog = list.sorted()
        .map { it.lowercase() }
        .associateBy { it.first() }
    println(catalog)
}

//Задание 5: Подсчёт средней длины слов в списке.

/*
Начальные значения из задачи 3.
Цель: Перевести все слова в количество букв, подсчитать среднее значение.
Вывести форматированный текст с двумя знаками после запятой.
 */

fun averageWordLength() {
    val list = listOf(
        "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер",
        "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик",
        "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник",
        "Коврик", "вешалка", "Подставка", "телевизор", "Комод",
        "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра",
        "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка",
        "Ключница", "плед", "Тумба", "игрушка", "Настенные часы",
        "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья",
        "посуда", "Настольная лампа", "торшер", "Этажерка"
    )
    val averageWordLength = list
        .map { it.length }
        .average()
    val averageWordLengthFormat = "%.2f".format(averageWordLength)
    println(averageWordLengthFormat)

}

//Задание 6: Категоризация чисел.
/*
Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).
 */

fun categorizationOfNumbers() {
    val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
    val result = numbers.distinct()
        .sortedDescending()
        .groupBy { if (it % 2 == 0) "четные" else "нечётные" }
    println(result)
}


//Задание 7: Поиск первого подходящего элемента
/*
Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60)
Цель: Найти первый возраст в списке, который соответствует условию (больше 18),
преобразовать его к строке, или вернуть сообщение "Подходящий возраст не найден".
 */

fun firstElement() {
    val ages = listOf(22, 18, 30, 45, 17, null, 60)
    val result = ages.filterNotNull().firstOrNull{it > 18 }
    val resultAll = result?.toString() ?: "Подходящий возраст не найден"
    println(resultAll)
}
